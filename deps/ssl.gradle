afterEvaluate {
    // Define a Task that will add a protobuf dependency, downloading
    // the source from GitHub if needed.
    println "projectDir:" + projectDir
    println "rootDir:" + rootDir
    println "buildDir:" + buildDir
    String ANDROID_NDK_HOME = android.ndkDirectory.absolutePath
    if (ANDROID_NDK_HOME.isEmpty()) {
        throw new GradleException("Incorrect ANDROID_NDK_HOME ENV Path!")
    }
    System.err.println("ANDROID_NDK_HOME:" + ANDROID_NDK_HOME)

    System.err.println("ANDROID_SDK_HOME:" + android.sdkDirectory.absolutePath)
    task opensslBuild {
        exec {
            executable "${rootDir}/third_party/build-openssl.sh"
            args "${ANDROID_NDK_HOME}"
            workingDir "${rootDir}/third_party"
        }
    }

    task boringsslBuild {
        exec {
            executable "${rootDir}/third_party/build-boringssl.sh"
            args "${ANDROID_NDK_HOME}"
            workingDir "${rootDir}/third_party"
        }
    }
    preBuild.dependsOn opensslBuild
    preBuild.dependsOn boringsslBuild
}

// https://blog.csdn.net/wei7017406/article/details/72084727
def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

def isWindows2() {
    return System.properties['os.name'].contains('windows')
}